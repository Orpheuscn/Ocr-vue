name: Deploy to Google Cloud Run

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  PROJECT_ID: textistext-ocr
  REGION: us-central1
  FRONTEND_SERVICE: textistext-frontend
  BACKEND_SERVICE: textistext-backend
  PYTHON_SERVICE: textistext-python

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy Backend to Cloud Run
        run: |
          gcloud run deploy ${{ env.BACKEND_SERVICE }} \
            --source=./backend \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --memory=1Gi \
            --cpu=1 \
            --max-instances=10 \
            --port=3000 \
            --timeout=300 \
            --set-env-vars="NODE_ENV=production,MONGODB_URI=${{ secrets.MONGODB_URI }},MONGODB_DB_NAME=${{ secrets.MONGODB_DB_NAME }},JWT_SECRET=${{ secrets.JWT_SECRET }},GOOGLE_VISION_API_KEY=${{ secrets.GOOGLE_VISION_API_KEY }},SESSION_SECRET=${{ secrets.SESSION_SECRET }},CSRF_SECRET=${{ secrets.CSRF_SECRET }}"

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy Frontend to Cloud Run
        run: |
          gcloud run deploy ${{ env.FRONTEND_SERVICE }} \
            --source=./frontend \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --memory=512Mi \
            --cpu=1 \
            --max-instances=10 \
            --port=8080

  deploy-python:
    name: Deploy Python Service
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy Python Service to Cloud Run
        run: |
          gcloud run deploy ${{ env.PYTHON_SERVICE }} \
            --source=./python-service \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --memory=2Gi \
            --cpu=2 \
            --max-instances=5 \
            --port=8080 \
            --timeout=600

  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, deploy-python]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Verify deployment
        run: |
          echo "Verifying deployment..."

          # 等待服务就绪
          sleep 30

          # 测试前端
          echo "Testing frontend..."
          curl -I https://textistext.com || echo "Frontend test failed"

          # 测试后端API
          echo "Testing backend API..."
          curl -I https://textistext.com/api/health || echo "Backend API test failed"

          # 获取健康检查详情
          echo "Backend health check:"
          curl -s https://textistext.com/api/health || echo "Health check failed"

          # 测试Python服务
          echo "Testing Python service..."
          curl -I https://textistext-python-82114549685.us-central1.run.app/health || echo "Python service test failed"

          echo "Deployment verification completed"
